-->begin
-->namespace
public class Parser 
{
-->constants

	private const bool _T = true;
	private const bool _x = false;
	private const int minErrDist = 2;
	
	private Scanner scanner;
	private Errors  errors;

	private Token t;    // last recognized token
	private Token la;   // lookahead token
	private int errDist = minErrDist;

	public FilterExpressionNode Root { get; private set; }
	
-->declarations

	public Parser(Scanner scanner) 
	{
		this.scanner = scanner;
		errors = new Errors();
	}

	private void SynErr (int n) 
	{
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	private void SemErr (string msg) 
	{
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	private void Get () 
	{
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) { ++errDist; break; }
-->pragmas
			la = t;
		}
	}
	
	private void Expect (int n) 
	{
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	private bool StartOf (int s) 
	{
		return set[s, la.kind];
	}
	
	private void ExpectWeak (int n, int follow) 
	{
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}

	private bool WeakSeparator(int n, int syFol, int repFol) 
	{
		int kind = la.kind;
		if (kind == n) {Get(); return true;}
		else if (StartOf(repFol)) {return false;}
		else {
			SynErr(n);
			while (!(set[syFol, kind] || set[repFol, kind] || set[0, kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}
	
-->productions

	public void Parse() 
	{
		la = new Token();
		la.val = "";		
		Get();
-->parseRoot
	}
	
	private static readonly bool[,] set = 
	{
-->initialization
	};
}

public class Errors 
{
	public int count = 0;                                    // number of errors detected
	public System.IO.TextWriter errorStream = Console.Out;   // error messages go to this stream
	public string errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text

	public virtual void SynErr (int line, int col, int n) {
		string s;
		switch (n) {
-->errors
			default: s = "error " + n; break;
		}
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}

	public virtual void SemErr (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}
	
	public virtual void SemErr (string s) {
		errorStream.WriteLine(s);
		count++;
	}
	
	public virtual void Warning (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
	}
	
	public virtual void Warning(string s) {
		errorStream.WriteLine(s);
	}
}

public class FatalError: Exception 
{
	public FatalError(string m): base(m) {}
}
